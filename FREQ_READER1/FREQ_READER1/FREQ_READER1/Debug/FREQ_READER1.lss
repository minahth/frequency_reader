
FREQ_READER1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800076  00800076  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002109  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f7  00000000  00000000  00002a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084a  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000594  00000000  00000000  00003bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bce  00000000  00000000  00004160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016fe  00000000  00000000  00004d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  8a:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
volatile unsigned short MOST_FREQ;
volatile unsigned long x=0;
volatile unsigned char FREQANCES[8];
volatile unsigned char NEW_BUFFER=0;
ISR(TIMER1_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	FREQ=((unsigned long)MOST_FREQ<<8)|TCNT0;
  b4:	80 91 77 00 	lds	r24, 0x0077
  b8:	90 91 78 00 	lds	r25, 0x0078
  bc:	22 b7       	in	r18, 0x32	; 50
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	ba 2f       	mov	r27, r26
  c4:	a9 2f       	mov	r26, r25
  c6:	98 2f       	mov	r25, r24
  c8:	88 27       	eor	r24, r24
  ca:	82 2b       	or	r24, r18
  cc:	80 93 7d 00 	sts	0x007D, r24
  d0:	90 93 7e 00 	sts	0x007E, r25
  d4:	a0 93 7f 00 	sts	0x007F, r26
  d8:	b0 93 80 00 	sts	0x0080, r27
	TCNT0=0;
  dc:	12 be       	out	0x32, r1	; 50
	MOST_FREQ=0;
  de:	10 92 78 00 	sts	0x0078, r1
  e2:	10 92 77 00 	sts	0x0077, r1
	TIMER1_SET_COUNTER(0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER1_SET_COUNTER>
	NEW_BUFFER=1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 76 00 	sts	0x0076, r24
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	MOST_FREQ++;
 124:	80 91 77 00 	lds	r24, 0x0077
 128:	90 91 78 00 	lds	r25, 0x0078
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 78 00 	sts	0x0078, r25
 132:	80 93 77 00 	sts	0x0077, r24
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:
{
	x++;
}*/
int main(void)
{
	LCD_init(cursordisable,blinkdisable);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_init>
	LCD_DisplayString("FREQ=");
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
	MOST_FREQ=0;
 154:	10 92 78 00 	sts	0x0078, r1
 158:	10 92 77 00 	sts	0x0077, r1
	TIMER0_ENABLE(TIMER_T0_SOURCE_FALLING,NORMAL_MOD,OC0_DISCONNECTED,OVER_FLOW_INT_ENABLE,0);
 15c:	00 e0       	ldi	r16, 0x00	; 0
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 be 02 	call	0x57c	; 0x57c <TIMER0_ENABLE>
	TIMER1_ENABLE(T1_OCA1_DISCONNECT,T1_OCB1_DISCONNECT,T1_NORMAL,T1_TIMER_1024,0x3d09,0,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,ENABLE_TIMER1_INT,DISABLE_TIMER1_INT);
 16a:	1f 92       	push	r1
 16c:	88 24       	eor	r8, r8
 16e:	83 94       	inc	r8
 170:	a1 2c       	mov	r10, r1
 172:	c1 2c       	mov	r12, r1
 174:	e1 2c       	mov	r14, r1
 176:	f1 2c       	mov	r15, r1
 178:	09 e0       	ldi	r16, 0x09	; 9
 17a:	1d e3       	ldi	r17, 0x3D	; 61
 17c:	25 e0       	ldi	r18, 0x05	; 5
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 d6 02 	call	0x5ac	; 0x5ac <TIMER1_ENABLE>
	global_interupt_enable();
 188:	8f b7       	in	r24, 0x3f	; 63
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	8f bf       	out	0x3f, r24	; 63
 18e:	0f 90       	pop	r0
	
	
    while(1)
    {
		
		 if (NEW_BUFFER)
 190:	80 91 76 00 	lds	r24, 0x0076
 194:	88 23       	and	r24, r24
 196:	e1 f3       	breq	.-8      	; 0x190 <main+0x4c>
		 {
			 global_interupt_disable();
 198:	8f b7       	in	r24, 0x3f	; 63
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8f bf       	out	0x3f, r24	; 63
			 OLD_FREQ=FREQ;
 19e:	80 91 7d 00 	lds	r24, 0x007D
 1a2:	90 91 7e 00 	lds	r25, 0x007E
 1a6:	a0 91 7f 00 	lds	r26, 0x007F
 1aa:	b0 91 80 00 	lds	r27, 0x0080
 1ae:	80 93 79 00 	sts	0x0079, r24
 1b2:	90 93 7a 00 	sts	0x007A, r25
 1b6:	a0 93 7b 00 	sts	0x007B, r26
 1ba:	b0 93 7c 00 	sts	0x007C, r27
			 global_interupt_enable();
 1be:	8f b7       	in	r24, 0x3f	; 63
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	8f bf       	out	0x3f, r24	; 63
			 LCD_Select_RowCol(0,5);
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_Select_RowCol>
			 LCD_DisplayString("            ");
 1cc:	86 e6       	ldi	r24, 0x66	; 102
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
			 LCD_Select_RowCol(0,5);
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_Select_RowCol>
			 FREQANCES[inttostring(FREQANCES,OLD_FREQ)]='\0';
 1dc:	40 91 79 00 	lds	r20, 0x0079
 1e0:	50 91 7a 00 	lds	r21, 0x007A
 1e4:	60 91 7b 00 	lds	r22, 0x007B
 1e8:	70 91 7c 00 	lds	r23, 0x007C
 1ec:	81 e8       	ldi	r24, 0x81	; 129
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <inttostring>
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ef 57       	subi	r30, 0x7F	; 127
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	10 82       	st	Z, r1
			 LCD_DisplayString(FREQANCES);
 1fe:	81 e8       	ldi	r24, 0x81	; 129
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
			 LCD_DisplayString("HZ");
 206:	83 e7       	ldi	r24, 0x73	; 115
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
			 NEW_BUFFER=0;
 20e:	10 92 76 00 	sts	0x0076, r1
 212:	be cf       	rjmp	.-132    	; 0x190 <main+0x4c>

00000214 <Send_instruction>:


void Send_instruction(uint8 instruction)
{
	/* RW, RS Should be 0 when Writing instructions to LCD */
	clearbit(*LCD_Control_reg_OP,RS);
 214:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(*LCD_Control_reg_OP,RW);
 216:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	ef e5       	ldi	r30, 0x5F	; 95
 21a:	f9 e0       	ldi	r31, 0x09	; 9
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <Send_instruction+0x8>
 220:	00 c0       	rjmp	.+0      	; 0x222 <Send_instruction+0xe>
 222:	00 00       	nop
	/* Delay of Address Set 60ns minimum */
	_delay_ms(DELAY_MS_LCD);
	
	/* Enable LCD E=1 */
	setbit(*LCD_Control_reg_OP,E);
 224:	da 9a       	sbi	0x1b, 2	; 27
 226:	ef e5       	ldi	r30, 0x5F	; 95
 228:	f9 e0       	ldi	r31, 0x09	; 9
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <Send_instruction+0x16>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <Send_instruction+0x1c>
 230:	00 00       	nop
	_delay_ms(DELAY_MS_LCD);
	#else
	
	#if Upper_Data_port
	/* clear the Prev Data */
	*LCD_Data_Reg_OP &=0x0F;
 232:	9b b3       	in	r25, 0x1b	; 27
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	9b bb       	out	0x1b, r25	; 27
	*LCD_Data_Reg_OP |= (instruction & 0xF0);
 238:	9b b3       	in	r25, 0x1b	; 27
 23a:	28 2f       	mov	r18, r24
 23c:	20 7f       	andi	r18, 0xF0	; 240
 23e:	92 2b       	or	r25, r18
 240:	9b bb       	out	0x1b, r25	; 27
 242:	ef e5       	ldi	r30, 0x5F	; 95
 244:	f9 e0       	ldi	r31, 0x09	; 9
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <Send_instruction+0x32>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <Send_instruction+0x38>
 24c:	00 00       	nop
	#endif
	/* Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(DELAY_MS_LCD);
	
	/* disable LCD E=0 */
	clearbit(*LCD_Control_reg_OP,E);
 24e:	da 98       	cbi	0x1b, 2	; 27
 250:	ef e5       	ldi	r30, 0x5F	; 95
 252:	f9 e0       	ldi	r31, 0x09	; 9
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Send_instruction+0x40>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Send_instruction+0x46>
 25a:	00 00       	nop
	/* Data Hold delay Th = 10ns */
	_delay_ms(DELAY_MS_LCD);
	
	/* Enable LCD E=1 */
	setbit(*LCD_Control_reg_OP,E);
 25c:	da 9a       	sbi	0x1b, 2	; 27
 25e:	ef e5       	ldi	r30, 0x5F	; 95
 260:	f9 e0       	ldi	r31, 0x09	; 9
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <Send_instruction+0x4e>
 266:	00 c0       	rjmp	.+0      	; 0x268 <Send_instruction+0x54>
 268:	00 00       	nop
	/* delay for processing PW min 450ns */
	_delay_ms(DELAY_MS_LCD);
	#if Upper_Data_port
	/* clear the Prev Data */
	*LCD_Data_Reg_OP &=0x0F;
 26a:	9b b3       	in	r25, 0x1b	; 27
 26c:	9f 70       	andi	r25, 0x0F	; 15
 26e:	9b bb       	out	0x1b, r25	; 27
	*LCD_Data_Reg_OP |= ((instruction <<4) );
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	f0 e1       	ldi	r31, 0x10	; 16
 274:	8f 9f       	mul	r24, r31
 276:	c0 01       	movw	r24, r0
 278:	11 24       	eor	r1, r1
 27a:	82 2b       	or	r24, r18
 27c:	8b bb       	out	0x1b, r24	; 27
 27e:	8f e5       	ldi	r24, 0x5F	; 95
 280:	99 e0       	ldi	r25, 0x09	; 9
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <Send_instruction+0x6e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <Send_instruction+0x74>
 288:	00 00       	nop
	*LCD_Data_Reg_OP |= ((instruction) & 0x0f);
	#endif
	/* Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(DELAY_MS_LCD);
	/* disable LCD E=0 */
	clearbit(*LCD_Control_reg_OP,E);
 28a:	da 98       	cbi	0x1b, 2	; 27
 28c:	ef e5       	ldi	r30, 0x5F	; 95
 28e:	f9 e0       	ldi	r31, 0x09	; 9
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <Send_instruction+0x7c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <Send_instruction+0x82>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <LCD_init>:

#include <stdlib.h>
volatile  uint8 ACddram;

void LCD_init(CURSOR CURSORmod,blink blinkmod)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	c8 2f       	mov	r28, r24
 2a0:	d6 2f       	mov	r29, r22
	/* Set The Control Pins Direction to OUtput */
	*LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
 2a2:	8a b3       	in	r24, 0x1a	; 26
 2a4:	87 60       	ori	r24, 0x07	; 7
 2a6:	8a bb       	out	0x1a, r24	; 26
	*LCD_Data_Reg_DIR =0xFF;
	#else
	
	#if Upper_Data_port
	/* Set The Direction of The Upper Pins to OP*/
	*LCD_Data_Reg_DIR |=(0xF0);
 2a8:	8a b3       	in	r24, 0x1a	; 26
 2aa:	80 6f       	ori	r24, 0xF0	; 240
 2ac:	8a bb       	out	0x1a, r24	; 26
	#else
	/* Set The Direction of The LOWER Pins to OP*/
	*LCD_Data_Reg_DIR|=(0x0F);
	#endif
	Send_instruction(Return_Home);
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 0a 01 	call	0x214	; 0x214 <Send_instruction>
	#endif
	
	Send_instruction(Data_Set);
 2b4:	88 e2       	ldi	r24, 0x28	; 40
 2b6:	0e 94 0a 01 	call	0x214	; 0x214 <Send_instruction>
	Send_instruction(Display_on(CURSORmod,blinkmod));
 2ba:	dc 60       	ori	r29, 0x0C	; 12
 2bc:	8c 2f       	mov	r24, r28
 2be:	88 0f       	add	r24, r24
 2c0:	8d 2b       	or	r24, r29
 2c2:	0e 94 0a 01 	call	0x214	; 0x214 <Send_instruction>
	Send_instruction(Clear_display);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 0a 01 	call	0x214	; 0x214 <Send_instruction>
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <LCD_LEAVE>:
			 
		 }
		 
		 void LCD_LEAVE()
		 {
		 	clearbit(*LCD_Control_reg_OP,E);
 2d2:	da 98       	cbi	0x1b, 2	; 27
			 clearbit(*LCD_Control_reg_OP,RS);
 2d4:	d8 98       	cbi	0x1b, 0	; 27
			 clearbit(*LCD_Control_reg_OP,RW);
 2d6:	d9 98       	cbi	0x1b, 1	; 27
			 #if eight_bitdata
			 *LCD_Data_Reg_OP=0;
			#else
			 #if Upper_Data_port
			 *LCD_Data_Reg_OP &=0x0F;
 2d8:	8b b3       	in	r24, 0x1b	; 27
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	08 95       	ret

000002e0 <LCD_DisplayChar>:
}

void LCD_DisplayChar(uint8 Data)
{
	/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
	setbit(*LCD_Control_reg_OP,RS);
 2e0:	d8 9a       	sbi	0x1b, 0	; 27
	clearbit(*LCD_Control_reg_OP,RW);
 2e2:	d9 98       	cbi	0x1b, 1	; 27
 2e4:	ef e5       	ldi	r30, 0x5F	; 95
 2e6:	f9 e0       	ldi	r31, 0x09	; 9
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_DisplayChar+0x8>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_DisplayChar+0xe>
 2ee:	00 00       	nop
	/* Delay of Address Set 60ns minimum */
	_delay_ms(DELAY_MS_LCD);
	/* Enable LCD E=1 */
	setbit(*LCD_Control_reg_OP,E);
 2f0:	da 9a       	sbi	0x1b, 2	; 27
 2f2:	ef e5       	ldi	r30, 0x5F	; 95
 2f4:	f9 e0       	ldi	r31, 0x09	; 9
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_DisplayChar+0x16>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_DisplayChar+0x1c>
 2fc:	00 00       	nop
	#if eight_bitdata
	*LCD_Data_Reg_OP=Data;
	#else
	#if Upper_Data_port
	/* clear the Prev Data */
	*LCD_Data_Reg_OP &=0x0F;
 2fe:	9b b3       	in	r25, 0x1b	; 27
 300:	9f 70       	andi	r25, 0x0F	; 15
 302:	9b bb       	out	0x1b, r25	; 27
	/* Send MSB (4-bits )*/
	*LCD_Data_Reg_OP |= (Data & 0xF0);
 304:	9b b3       	in	r25, 0x1b	; 27
 306:	28 2f       	mov	r18, r24
 308:	20 7f       	andi	r18, 0xF0	; 240
 30a:	92 2b       	or	r25, r18
 30c:	9b bb       	out	0x1b, r25	; 27
 30e:	ef e5       	ldi	r30, 0x5F	; 95
 310:	f9 e0       	ldi	r31, 0x09	; 9
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_DisplayChar+0x32>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_DisplayChar+0x38>
 318:	00 00       	nop
	#endif
	
	/* Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(DELAY_MS_LCD);
	/* disable LCD E=0 */
	clearbit(*LCD_Control_reg_OP,E);
 31a:	da 98       	cbi	0x1b, 2	; 27
 31c:	ef e5       	ldi	r30, 0x5F	; 95
 31e:	f9 e0       	ldi	r31, 0x09	; 9
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_DisplayChar+0x40>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_DisplayChar+0x46>
 326:	00 00       	nop
	/* Data Hold delay Th = 10ns */
	_delay_ms(DELAY_MS_LCD);
	/* Enable LCD E=1 */
	setbit(*LCD_Control_reg_OP,E);
 328:	da 9a       	sbi	0x1b, 2	; 27
	
	#if Upper_Data_port
	/* clear the Prev Data */
	*LCD_Data_Reg_OP &=0x0F;
 32a:	9b b3       	in	r25, 0x1b	; 27
 32c:	9f 70       	andi	r25, 0x0F	; 15
 32e:	9b bb       	out	0x1b, r25	; 27
	*LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
 330:	2b b3       	in	r18, 0x1b	; 27
 332:	f0 e1       	ldi	r31, 0x10	; 16
 334:	8f 9f       	mul	r24, r31
 336:	c0 01       	movw	r24, r0
 338:	11 24       	eor	r1, r1
 33a:	82 2b       	or	r24, r18
 33c:	8b bb       	out	0x1b, r24	; 27
 33e:	8f e5       	ldi	r24, 0x5F	; 95
 340:	99 e0       	ldi	r25, 0x09	; 9
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_DisplayChar+0x62>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_DisplayChar+0x68>
 348:	00 00       	nop
 34a:	ef e5       	ldi	r30, 0x5F	; 95
 34c:	f9 e0       	ldi	r31, 0x09	; 9
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_DisplayChar+0x6e>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_DisplayChar+0x74>
 354:	00 00       	nop
	
	#endif
	/* Data set-up time delay  Tdsw = 195 ns */
	_delay_ms(DELAY_MS_LCD);
	/* disable LCD E=0 */
	clearbit(*LCD_Control_reg_OP,E);
 356:	da 98       	cbi	0x1b, 2	; 27
 358:	8f e5       	ldi	r24, 0x5F	; 95
 35a:	99 e0       	ldi	r25, 0x09	; 9
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_DisplayChar+0x7c>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_DisplayChar+0x82>
 362:	00 00       	nop
	/* Data Hold delay Th = 10ns */
	_delay_ms(DELAY_MS_LCD);
	 LCD_LEAVE();
 364:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_LEAVE>
 368:	08 95       	ret

0000036a <LCD_DisplayString>:
	/* Clear Screen */
	Send_instruction(Clear_display);
}

	void LCD_DisplayString(char * ptr)
	{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
		while(*ptr != '\0')
 370:	88 81       	ld	r24, Y
 372:	88 23       	and	r24, r24
 374:	31 f0       	breq	.+12     	; 0x382 <LCD_DisplayString+0x18>
 376:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_DisplayChar(*ptr);
 378:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_DisplayChar>
	Send_instruction(Clear_display);
}

	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
 37c:	89 91       	ld	r24, Y+
 37e:	81 11       	cpse	r24, r1
 380:	fb cf       	rjmp	.-10     	; 0x378 <LCD_DisplayString+0xe>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
		uint8 Address=0;
		
		switch(Row)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	39 f0       	breq	.+14     	; 0x39a <LCD_Select_RowCol+0x12>
 38c:	58 f0       	brcs	.+22     	; 0x3a4 <LCD_Select_RowCol+0x1c>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	31 f0       	breq	.+12     	; 0x39e <LCD_Select_RowCol+0x16>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	31 f0       	breq	.+12     	; 0x3a2 <LCD_Select_RowCol+0x1a>
		}
	}
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
		uint8 Address=0;
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <LCD_Select_RowCol+0x1c>
			/* When Writing To LCD 1st Col The Base Address is 0x00 */
			Address=col + LCD_1ST_BASE;
			break;
			case 1:
			/* When Writing To LCD 2nd Col The Base Address is 0x40 */
			Address=col + LCD_2ND_BASE;
 39a:	60 5c       	subi	r22, 0xC0	; 192
			break;
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <LCD_Select_RowCol+0x1c>
			case 2:
			/* When Writing To LCD 1st Col The Base Address is 0x10 */
			Address = col + LCD_3RD_BASE;
 39e:	60 5f       	subi	r22, 0xF0	; 240
			break;
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <LCD_Select_RowCol+0x1c>
			case 3:
			/* When Writing To LCD 1st Col The Base Address is 0x50 */
			Address=col+ LCD_4TH_BASE;
 3a2:	60 5b       	subi	r22, 0xB0	; 176
			break;
		}
		
		Send_instruction(DDRAM_CONST|Address);
 3a4:	86 2f       	mov	r24, r22
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	0e 94 0a 01 	call	0x214	; 0x214 <Send_instruction>
		 LCD_LEAVE();
 3ac:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_LEAVE>
 3b0:	08 95       	ret

000003b2 <gpio_outputconfg>:
	
	
	
	
	void gpio_outputconfg(volatile uint8 * DiR_address,volatile uint8 * outputmodreg_address,OUTPUTMOD mod,uint8 pin)
	{
 3b2:	fb 01       	movw	r30, r22
		
		setbit(*DiR_address,pin);
 3b4:	dc 01       	movw	r26, r24
 3b6:	3c 91       	ld	r19, X
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <gpio_outputconfg+0x12>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <gpio_outputconfg+0xe>
 3c8:	36 2b       	or	r19, r22
 3ca:	3c 93       	st	X, r19
		clearbit(*outputmodreg_address,pin);
 3cc:	80 81       	ld	r24, Z
 3ce:	60 95       	com	r22
 3d0:	68 23       	and	r22, r24
 3d2:	60 83       	st	Z, r22
		*outputmodreg_address|=mod<<pin;
 3d4:	80 81       	ld	r24, Z
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	ba 01       	movw	r22, r20
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <gpio_outputconfg+0x2e>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	2a 95       	dec	r18
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <gpio_outputconfg+0x2a>
 3e4:	9b 01       	movw	r18, r22
 3e6:	28 2b       	or	r18, r24
 3e8:	20 83       	st	Z, r18
 3ea:	08 95       	ret

000003ec <inttostring>:
 * Created: 9/1/2020 12:42:54 PM
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long thenumber)
{
 3ec:	3f 92       	push	r3
 3ee:	4f 92       	push	r4
 3f0:	5f 92       	push	r5
 3f2:	6f 92       	push	r6
 3f4:	7f 92       	push	r7
 3f6:	8f 92       	push	r8
 3f8:	9f 92       	push	r9
 3fa:	af 92       	push	r10
 3fc:	bf 92       	push	r11
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ec 01       	movw	r28, r24
	unsigned char counter=0;
	unsigned long the_scaler=1000000000;
	if (thenumber<0)
 410:	77 23       	and	r23, r23
 412:	64 f4       	brge	.+24     	; 0x42c <inttostring+0x40>
	{
		the_return[0]='-';
 414:	8d e2       	ldi	r24, 0x2D	; 45
 416:	88 83       	st	Y, r24
		thenumber=thenumber*(-1);
 418:	70 95       	com	r23
 41a:	60 95       	com	r22
 41c:	50 95       	com	r21
 41e:	41 95       	neg	r20
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	6f 4f       	sbci	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
		counter=1;
 426:	33 24       	eor	r3, r3
 428:	33 94       	inc	r3
 42a:	01 c0       	rjmp	.+2      	; 0x42e <inttostring+0x42>
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long thenumber)
{
	unsigned char counter=0;
 42c:	31 2c       	mov	r3, r1
	{
		the_return[0]='-';
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
 42e:	41 15       	cp	r20, r1
 430:	51 05       	cpc	r21, r1
 432:	61 05       	cpc	r22, r1
 434:	71 05       	cpc	r23, r1
 436:	59 f0       	breq	.+22     	; 0x44e <inttostring+0x62>
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
 438:	4a 01       	movw	r8, r20
 43a:	5b 01       	movw	r10, r22
 43c:	41 15       	cp	r20, r1
 43e:	8a ec       	ldi	r24, 0xCA	; 202
 440:	58 07       	cpc	r21, r24
 442:	8a e9       	ldi	r24, 0x9A	; 154
 444:	68 07       	cpc	r22, r24
 446:	8b e3       	ldi	r24, 0x3B	; 59
 448:	78 07       	cpc	r23, r24
 44a:	28 f0       	brcs	.+10     	; 0x456 <inttostring+0x6a>
 44c:	61 c0       	rjmp	.+194    	; 0x510 <inttostring+0x124>
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
	{
		the_return[0]='0';
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	88 83       	st	Y, r24
		return 1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	81 c0       	rjmp	.+258    	; 0x558 <inttostring+0x16c>
	}
	while (thenumber/the_scaler==0)
 456:	0f 2e       	mov	r0, r31
 458:	c1 2c       	mov	r12, r1
 45a:	fa ec       	ldi	r31, 0xCA	; 202
 45c:	df 2e       	mov	r13, r31
 45e:	fa e9       	ldi	r31, 0x9A	; 154
 460:	ef 2e       	mov	r14, r31
 462:	fb e3       	ldi	r31, 0x3B	; 59
 464:	ff 2e       	mov	r15, r31
 466:	f0 2d       	mov	r31, r0
	{
		the_scaler=the_scaler/10;
 468:	0f 2e       	mov	r0, r31
 46a:	fa e0       	ldi	r31, 0x0A	; 10
 46c:	4f 2e       	mov	r4, r31
 46e:	51 2c       	mov	r5, r1
 470:	61 2c       	mov	r6, r1
 472:	71 2c       	mov	r7, r1
 474:	f0 2d       	mov	r31, r0
 476:	c7 01       	movw	r24, r14
 478:	b6 01       	movw	r22, r12
 47a:	a3 01       	movw	r20, r6
 47c:	92 01       	movw	r18, r4
 47e:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 482:	69 01       	movw	r12, r18
 484:	7a 01       	movw	r14, r20
	if (thenumber==0)
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
 486:	c5 01       	movw	r24, r10
 488:	b4 01       	movw	r22, r8
 48a:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 48e:	23 2b       	or	r18, r19
 490:	24 2b       	or	r18, r20
 492:	25 2b       	or	r18, r21
 494:	81 f3       	breq	.-32     	; 0x476 <inttostring+0x8a>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
 496:	8e 01       	movw	r16, r28
 498:	03 0d       	add	r16, r3
 49a:	11 1d       	adc	r17, r1
 49c:	c5 01       	movw	r24, r10
 49e:	b4 01       	movw	r22, r8
 4a0:	a7 01       	movw	r20, r14
 4a2:	96 01       	movw	r18, r12
 4a4:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 4a8:	20 5d       	subi	r18, 0xD0	; 208
 4aa:	f8 01       	movw	r30, r16
 4ac:	20 83       	st	Z, r18
			counter++;
 4ae:	33 94       	inc	r3
			thenumber=thenumber%the_scaler;
 4b0:	76 2e       	mov	r7, r22
 4b2:	67 2e       	mov	r6, r23
 4b4:	58 2e       	mov	r5, r24
 4b6:	49 2e       	mov	r4, r25
			if (the_scaler==1)
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	cf 16       	cp	r12, r31
 4bc:	d1 04       	cpc	r13, r1
 4be:	e1 04       	cpc	r14, r1
 4c0:	f1 04       	cpc	r15, r1
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <inttostring+0xda>
 4c4:	41 c0       	rjmp	.+130    	; 0x548 <inttostring+0x15c>
 4c6:	20 c0       	rjmp	.+64     	; 0x508 <inttostring+0x11c>
			{
				break;
			}
			the_scaler=the_scaler/10;
 4c8:	c7 01       	movw	r24, r14
 4ca:	b6 01       	movw	r22, r12
 4cc:	a5 01       	movw	r20, r10
 4ce:	94 01       	movw	r18, r8
 4d0:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 4d4:	69 01       	movw	r12, r18
 4d6:	7a 01       	movw	r14, r20
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
 4d8:	8e 01       	movw	r16, r28
 4da:	03 0d       	add	r16, r3
 4dc:	11 1d       	adc	r17, r1
 4de:	67 2d       	mov	r22, r7
 4e0:	76 2d       	mov	r23, r6
 4e2:	85 2d       	mov	r24, r5
 4e4:	94 2d       	mov	r25, r4
 4e6:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 4ea:	20 5d       	subi	r18, 0xD0	; 208
 4ec:	f8 01       	movw	r30, r16
 4ee:	20 83       	st	Z, r18
			counter++;
 4f0:	33 94       	inc	r3
			thenumber=thenumber%the_scaler;
 4f2:	76 2e       	mov	r7, r22
 4f4:	67 2e       	mov	r6, r23
 4f6:	58 2e       	mov	r5, r24
 4f8:	49 2e       	mov	r4, r25
			if (the_scaler==1)
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	cf 16       	cp	r12, r31
 4fe:	d1 04       	cpc	r13, r1
 500:	e1 04       	cpc	r14, r1
 502:	f1 04       	cpc	r15, r1
 504:	09 f7       	brne	.-62     	; 0x4c8 <inttostring+0xdc>
 506:	02 c0       	rjmp	.+4      	; 0x50c <inttostring+0x120>
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
			counter++;
 508:	83 2d       	mov	r24, r3
 50a:	26 c0       	rjmp	.+76     	; 0x558 <inttostring+0x16c>
 50c:	83 2d       	mov	r24, r3
 50e:	24 c0       	rjmp	.+72     	; 0x558 <inttostring+0x16c>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
 510:	8e 01       	movw	r16, r28
 512:	03 0d       	add	r16, r3
 514:	11 1d       	adc	r17, r1
 516:	cb 01       	movw	r24, r22
 518:	ba 01       	movw	r22, r20
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	3a ec       	ldi	r19, 0xCA	; 202
 51e:	4a e9       	ldi	r20, 0x9A	; 154
 520:	5b e3       	ldi	r21, 0x3B	; 59
 522:	0e 94 38 03 	call	0x670	; 0x670 <__udivmodsi4>
 526:	20 5d       	subi	r18, 0xD0	; 208
 528:	f8 01       	movw	r30, r16
 52a:	20 83       	st	Z, r18
			counter++;
 52c:	33 94       	inc	r3
			thenumber=thenumber%the_scaler;
 52e:	76 2e       	mov	r7, r22
 530:	67 2e       	mov	r6, r23
 532:	58 2e       	mov	r5, r24
 534:	49 2e       	mov	r4, r25
 536:	0f 2e       	mov	r0, r31
 538:	c1 2c       	mov	r12, r1
 53a:	fa ec       	ldi	r31, 0xCA	; 202
 53c:	df 2e       	mov	r13, r31
 53e:	fa e9       	ldi	r31, 0x9A	; 154
 540:	ef 2e       	mov	r14, r31
 542:	fb e3       	ldi	r31, 0x3B	; 59
 544:	ff 2e       	mov	r15, r31
 546:	f0 2d       	mov	r31, r0
			if (the_scaler==1)
			{
				break;
			}
			the_scaler=the_scaler/10;
 548:	0f 2e       	mov	r0, r31
 54a:	fa e0       	ldi	r31, 0x0A	; 10
 54c:	8f 2e       	mov	r8, r31
 54e:	91 2c       	mov	r9, r1
 550:	a1 2c       	mov	r10, r1
 552:	b1 2c       	mov	r11, r1
 554:	f0 2d       	mov	r31, r0
 556:	b8 cf       	rjmp	.-144    	; 0x4c8 <inttostring+0xdc>
	
	
	
	
	return counter;
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	df 90       	pop	r13
 566:	cf 90       	pop	r12
 568:	bf 90       	pop	r11
 56a:	af 90       	pop	r10
 56c:	9f 90       	pop	r9
 56e:	8f 90       	pop	r8
 570:	7f 90       	pop	r7
 572:	6f 90       	pop	r6
 574:	5f 90       	pop	r5
 576:	4f 90       	pop	r4
 578:	3f 90       	pop	r3
 57a:	08 95       	ret

0000057c <TIMER0_ENABLE>:
 
 }
 TIMER0_ENABLE(TIMER_1024,OVER_FLOW_INT_ENABLE);
 dont change TCNT0_ACCESS or clock_carry */
  void TIMER0_ENABLE(T0_clock fre,timer0_mode mode,TIMER0_COMPARE_OUTPUT_MOD cmpmode,TIMER0_INT intmode, unsigned char oc)
{     OCRO_ACCESS=oc;
 57c:	0f 93       	push	r16
 57e:	0c bf       	out	0x3c, r16	; 60
	  TCCR0_ACCESS=0x00;
 580:	13 be       	out	0x33, r1	; 51
	  TIMSK_ACCESS&=0xfC;
 582:	99 b7       	in	r25, 0x39	; 57
 584:	9c 7f       	andi	r25, 0xFC	; 252
 586:	99 bf       	out	0x39, r25	; 57
	  TCCR0_ACCESS|=fre|mode|cmpmode;
 588:	93 b7       	in	r25, 0x33	; 51
 58a:	49 2b       	or	r20, r25
 58c:	64 2b       	or	r22, r20
 58e:	86 2b       	or	r24, r22
 590:	83 bf       	out	0x33, r24	; 51
	  TIMSK_ACCESS |=intmode;
 592:	89 b7       	in	r24, 0x39	; 57
 594:	82 2b       	or	r24, r18
 596:	89 bf       	out	0x39, r24	; 57
	  if (intmode!=INT_DISABLE)
 598:	22 23       	and	r18, r18
 59a:	19 f0       	breq	.+6      	; 0x5a2 <TIMER0_ENABLE+0x26>
	  {global_interupt_enable();
 59c:	8f b7       	in	r24, 0x3f	; 63
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	8f bf       	out	0x3f, r24	; 63
	  }
   }
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <TIMER1_SET_COUNTER>:
	return x;
}

void TIMER1_SET_COUNTER(unsigned short x)
{
	TCNT1H_ACCESS=x>>8;
 5a6:	9d bd       	out	0x2d, r25	; 45
	TCNT1L_ACCESS=0x00ff&x;
 5a8:	8c bd       	out	0x2c, r24	; 44
 5aa:	08 95       	ret

000005ac <TIMER1_ENABLE>:
				   unsigned short OCR1B_DATA, 
				   T1_INT_DATATYPE TOIE1_state, 
				   T1_INT_DATATYPE OCIE1B_state, 
				   T1_INT_DATATYPE OCIE1A_state, 
				   T1_INT_DATATYPE TICIE1_state)
{
 5ac:	8f 92       	push	r8
 5ae:	af 92       	push	r10
 5b0:	cf 92       	push	r12
 5b2:	df 92       	push	r13
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	d6 2e       	mov	r13, r22
	TCCR1A_ACCESS=00;
 5c6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B_ACCESS=00;
 5c8:	1e bc       	out	0x2e, r1	; 46
	TCCR1A_ACCESS|=COM1A<<6;
 5ca:	9f b5       	in	r25, 0x2f	; 47
 5cc:	30 e4       	ldi	r19, 0x40	; 64
 5ce:	83 9f       	mul	r24, r19
 5d0:	f0 01       	movw	r30, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	e9 2b       	or	r30, r25
 5d6:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=COM1B<<4;
 5d8:	9f b5       	in	r25, 0x2f	; 47
 5da:	30 e1       	ldi	r19, 0x10	; 16
 5dc:	63 9f       	mul	r22, r19
 5de:	f0 01       	movw	r30, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	e9 2b       	or	r30, r25
 5e4:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=WGM1&0x03;
 5e6:	9f b5       	in	r25, 0x2f	; 47
 5e8:	34 2f       	mov	r19, r20
 5ea:	33 70       	andi	r19, 0x03	; 3
 5ec:	93 2b       	or	r25, r19
 5ee:	9f bd       	out	0x2f, r25	; 47
	TCCR1B_ACCESS|=(WGM1&0x0c)<<1;
 5f0:	9e b5       	in	r25, 0x2e	; 46
 5f2:	4c 70       	andi	r20, 0x0C	; 12
 5f4:	44 0f       	add	r20, r20
 5f6:	49 2b       	or	r20, r25
 5f8:	4e bd       	out	0x2e, r20	; 46
    OCR1AH_ACCESS=OCR1A_DATA>>8;
 5fa:	1b bd       	out	0x2b, r17	; 43
	OCR1AL_ACCESS=OCR1A_DATA;
 5fc:	0a bd       	out	0x2a, r16	; 42
	OCR1BH_ACCESS=OCR1B_DATA>>8;
 5fe:	f9 bc       	out	0x29, r15	; 41
	OCR1BL_ACCESS=OCR1B_DATA;
 600:	e8 bc       	out	0x28, r14	; 40
	TIMSK_ACCESS&=0xc3;
 602:	99 b7       	in	r25, 0x39	; 57
 604:	93 7c       	andi	r25, 0xC3	; 195
 606:	99 bf       	out	0x39, r25	; 57
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
	TIMSK_ACCESS|=x<<2;
 608:	99 b7       	in	r25, 0x39	; 57
    OCR1AH_ACCESS=OCR1A_DATA>>8;
	OCR1AL_ACCESS=OCR1A_DATA;
	OCR1BH_ACCESS=OCR1B_DATA>>8;
	OCR1BL_ACCESS=OCR1B_DATA;
	TIMSK_ACCESS&=0xc3;
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
 60a:	3d 85       	ldd	r19, Y+13	; 0x0d
 60c:	33 0f       	add	r19, r19
 60e:	33 0f       	add	r19, r19
 610:	33 0f       	add	r19, r19
 612:	c3 2a       	or	r12, r19
 614:	88 0c       	add	r8, r8
 616:	88 0c       	add	r8, r8
 618:	c8 28       	or	r12, r8
 61a:	aa 0c       	add	r10, r10
 61c:	ac 28       	or	r10, r12
	TIMSK_ACCESS|=x<<2;
 61e:	aa 0c       	add	r10, r10
 620:	aa 0c       	add	r10, r10
 622:	a9 2a       	or	r10, r25
 624:	a9 be       	out	0x39, r10	; 57
	TCCR1B_ACCESS|=CS1;
 626:	9e b5       	in	r25, 0x2e	; 46
 628:	29 2b       	or	r18, r25
 62a:	2e bd       	out	0x2e, r18	; 46
	if (COM1A!=T1_OCA1_DISCONNECT)
 62c:	88 23       	and	r24, r24
 62e:	41 f0       	breq	.+16     	; 0x640 <TIMER1_ENABLE+0x94>
	{gpio_outputconfg(DDR_OC1A_ADDRESS,PORT_OUTMOD_OC1A_ADDRESS,OUTPASS,OC1A_PIN);
 630:	25 e0       	ldi	r18, 0x05	; 5
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	60 e3       	ldi	r22, 0x30	; 48
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	81 e3       	ldi	r24, 0x31	; 49
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <gpio_outputconfg>
	}
	if (COM1B!=T1_OCB1_DISCONNECT)
 640:	dd 20       	and	r13, r13
 642:	41 f0       	breq	.+16     	; 0x654 <TIMER1_ENABLE+0xa8>
	{gpio_outputconfg(DDR_OC1B_ADDRESS,PORT_OUTMOD_OC1B_ADDRESS,OUTPASS,OC1B_PIN);
 644:	24 e0       	ldi	r18, 0x04	; 4
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	60 e3       	ldi	r22, 0x30	; 48
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	81 e3       	ldi	r24, 0x31	; 49
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <gpio_outputconfg>
	}
	/**/
	TCCR1A_ACCESS|=0x08;
 654:	8f b5       	in	r24, 0x2f	; 47
 656:	88 60       	ori	r24, 0x08	; 8
 658:	8f bd       	out	0x2f, r24	; 47
	/**/
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	ff 90       	pop	r15
 664:	ef 90       	pop	r14
 666:	df 90       	pop	r13
 668:	cf 90       	pop	r12
 66a:	af 90       	pop	r10
 66c:	8f 90       	pop	r8
 66e:	08 95       	ret

00000670 <__udivmodsi4>:
 670:	a1 e2       	ldi	r26, 0x21	; 33
 672:	1a 2e       	mov	r1, r26
 674:	aa 1b       	sub	r26, r26
 676:	bb 1b       	sub	r27, r27
 678:	fd 01       	movw	r30, r26
 67a:	0d c0       	rjmp	.+26     	; 0x696 <__udivmodsi4_ep>

0000067c <__udivmodsi4_loop>:
 67c:	aa 1f       	adc	r26, r26
 67e:	bb 1f       	adc	r27, r27
 680:	ee 1f       	adc	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	a2 17       	cp	r26, r18
 686:	b3 07       	cpc	r27, r19
 688:	e4 07       	cpc	r30, r20
 68a:	f5 07       	cpc	r31, r21
 68c:	20 f0       	brcs	.+8      	; 0x696 <__udivmodsi4_ep>
 68e:	a2 1b       	sub	r26, r18
 690:	b3 0b       	sbc	r27, r19
 692:	e4 0b       	sbc	r30, r20
 694:	f5 0b       	sbc	r31, r21

00000696 <__udivmodsi4_ep>:
 696:	66 1f       	adc	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	1a 94       	dec	r1
 6a0:	69 f7       	brne	.-38     	; 0x67c <__udivmodsi4_loop>
 6a2:	60 95       	com	r22
 6a4:	70 95       	com	r23
 6a6:	80 95       	com	r24
 6a8:	90 95       	com	r25
 6aa:	9b 01       	movw	r18, r22
 6ac:	ac 01       	movw	r20, r24
 6ae:	bd 01       	movw	r22, r26
 6b0:	cf 01       	movw	r24, r30
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
